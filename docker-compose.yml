version: '3.8'

services:
  # Nginx Load Balancer
  controller:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
    networks:
      - app-network

  # Laravel API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/var/www/html
    environment:
      DB_CONNECTION: mysql
      DB_HOST: database
      DB_PORT: 3306
      DB_DATABASE: customer_db
      DB_USERNAME: customer_user
      DB_PASSWORD: customer_password
      ES_HOST: http://searcher:9200
      ELASTICSEARCH_HOST: searcher
      ELASTICSEARCH_PORT: 9200
    depends_on:
      database:
        condition: service_healthy
      searcher:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "9001:9000"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9000/api/customers"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MySQL Database
  database:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: customer_db
      MYSQL_USER: customer_user
      MYSQL_PASSWORD: customer_password
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Elasticsearch Service
  searcher:
    image: elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:9200"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Frontend Angular Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  es-data: